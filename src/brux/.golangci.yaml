# Schema: https://golangci-lint.run/jsonschema/golangci.jsonschema.json
---
run:
  timeout: 5m
  go: "1.23"

# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  copyloopvar:
    # Check all assigning the loop variable to another variable.
    # Default: false
    check-alias: true

  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 12
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 10.0

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 80
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 40

  # Eventually make it 140 or smaller
  lll:
    line-length: 200

  gocognit:
    # Minimal code complexity to report
    # Default: 30 (but we recommend 10-20)
    min-complexity: 25

  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      ifElseChain:
        minThreshold: 4
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: false
    # Apply the rewrite rules to the source before reformatting.
    # https://pkg.go.dev/cmd/gofmt
    # Default: []
    rewrite-rules:
      - pattern: 'interface{}'
        replacement: 'any'
      - pattern: 'a[b:len(a)]'
        replacement: 'a[b:]'

  mnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`
    # Default: []
    ignored-functions:
      - os.Chmod
      - os.Mkdir
      - os.MkdirAll
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets
      - prometheus.ExponentialBucketsRange
      - prometheus.LinearBuckets
      - strconv.FormatFloat
      - strconv.FormatInt
      - strconv.FormatUint
      - strconv.ParseFloat
      - strconv.ParseInt
      - strconv.ParseUint

  gci:
    sections:
      - standard
      - default
      - prefix(github.com/ashishb)

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/google/uuid
            reason: "see recommendation from dev-infra team: https://confluence.gtforge.com/x/gQI6Aw"

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    includes:
      - G101  # Look for hard coded credentials
      - G102  # Bind to all interfaces
      - G103  # Audit the use of unsafe block
      - G104  # Audit errors not checked
      - G106  # Audit the use of ssh.InsecureIgnoreHostKey
      - G107  # Url provided to HTTP request as taint input
      - G108  # Profiling endpoint automatically exposed on /debug/pprof
      - G109  # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      - G110  # Potential DoS vulnerability via decompression bomb
      - G111  # Potential directory traversal
      - G112  # Potential slowloris attack
      - G113  # Usage of Rat.SetString in math/big with an overflow (CVE-2022-23772)
      - G114  # Use of net/http serve function that has no support for setting timeouts
      - G201  # SQL query construction using format string
      - G202  # SQL query construction using string concatenation
      - G203  # Use of unescaped data in HTML templates
      - G204  # Audit use of command execution
      - G301  # Poor file permissions used when creating a directory
      - G302  # Poor file permissions used with chmod
      - G303  # Creating tempfile using a predictable path
      - G304  # File path provided as taint input
      - G305  # File traversal when extracting zip/tar archive
      - G306  # Poor file permissions used when writing to a new file
      - G307  # Poor file permissions used when creating a file with os.Create
      - G401  # Detect the usage of DES, RC4, MD5 or SHA1
      - G402  # Look for bad TLS connection settings
      - G403  # Ensure minimum RSA key length of 2048 bits
      - G404  # Insecure random number source (rand)
      - G501  # Import blocklist: crypto/md5
      - G502  # Import blocklist: crypto/des
      - G503  # Import blocklist: crypto/rc4
      - G504  # Import blocklist: net/http/cgi
      - G505  # Import blocklist: crypto/sha1
      - G601  # Implicit memory aliasing of items from a range statement
      - G602  # Slice access out of bounds
    # Exclude generated files
    # Default: false
    exclude-generated: true
    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    severity: medium
    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    confidence: medium
    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    concurrency: 12
    # To specify the configuration of rules.
    config:
      # Globals are applicable to all rules.
      global:
        # If true, ignore #nosec in comments (and an alternative as well).
        # Default: false
        nosec: true
        # Add an alternative comment prefix to #nosec (both will work at the same time).
        # Default: ""
        "#nosec": "#my-custom-nosec"
        # Define whether nosec issues are counted as finding or not.
        # Default: false
        show-ignored: true
        # Audit mode enables addition checks that for normal code analysis might be too nosy.
        # Default: false
        audit: true
      G101:
        # Regexp pattern for variables and constants to find.
        # Default: "(?i)passwd|pass|password|pwd|secret|token|pw|apiKey|bearer|cred"
        pattern: "(?i)example"
        # If true, complain about all cases (even with low entropy).
        # Default: false
        ignore_entropy: false
        # Maximum allowed entropy of the string.
        # Default: "80.0"
        entropy_threshold: "80.0"
        # Maximum allowed value of entropy/string length.
        # Is taken into account if entropy >= entropy_threshold/2.
        # Default: "3.0"
        per_char_threshold: "3.0"
        # Calculate entropy for first N chars of the string.
        # Default: "16"
        truncate: "32"
      # Additional functions to ignore while checking unhandled errors.
      # Following functions always ignored:
      #   bytes.Buffer:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   fmt:
      #     - Print
      #     - Printf
      #     - Println
      #     - Fprint
      #     - Fprintf
      #     - Fprintln
      #   strings.Builder:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   io.PipeWriter:
      #     - CloseWithError
      #   hash.Hash:
      #     - Write
      #   os:
      #     - Unsetenv
      # Default: {}
      G104:
        fmt:
          - Fscanf
      G111:
        # Regexp pattern to find potential directory traversal.
        # Default: "http\\.Dir\\(\"\\/\"\\)|http\\.Dir\\('\\/'\\)"
        pattern: "custom\\.Dir\\(\\)"
      # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll
      # Default: "0750"
      G301: "0750"
      # Maximum allowed permissions mode for os.OpenFile and os.Chmod
      # Default: "0600"
      G302: "0600"
      # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile
      # Default: "0600"
      G306: "0600"

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment  # too strict

    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: false

  ireturn:
    # ireturn does not allow using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces
    # - `generic` for generic interfaces added in go 1.18

    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - anon
      - error
      - empty
      - generic
      - stdlib
      - http
      - render
      - github.com/kristinjeanna/redact

  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # Default: 20
    # TODO(ashishb): Eventually bring this to 100
    under: 33

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [funlen, gocognit, lll]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx

  tagalign:
    align: true
    sort: true
    order:
      - json
      - yaml
      - yml
      - toml
      - mapstructure
      - binding
      - validate
    strict: false


  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: true

# Ref: https://golangci-lint.run/usage/linters/
linters:
  enable:
    - asasalint  # Check for pass []any as any in variadic func(...any).
    - asciicheck  # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk  # Checks for dangerous Unicode character sequences
    - bodyclose  # checks whether HTTP response body is closed successfully
    - canonicalheader
    - containedctx  #  Containedctx is a linter that detects struct contained context.Context field.
    # - contextcheck  # Check whether the function uses a non-inherited context. Re-enable it later.
    - copyloopvar  # Copyloopvar is a linter detects places where loop variables are copied.
    # - cyclop  # Control code complexity - https://developer20.com/projects/cyclop/. Re-enable it later.
    - decorder  # Check declaration order and count of types, constants, variables and functions.
    - dogsled  # Checks assignments with too many blank identifiers (e.g. x, , , _, := f()).
    # - dupl  # Tool for code clone detection. Re-enable it.
    - dupword  # Checks for duplicate words in the source code.
    - durationcheck  # check for two durations multiplied together
    - err113
    - errcheck  # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases.
    - errchkjson  # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname  # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint  # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    # - exhaustive  #Check exhaustiveness of enum switch statements. Enable this once issues in `flow` package are fixed.
    - exptostd  # Detects functions from golang.org/x/exp/ that can be replaced by std functions.
    - fatcontext  # Detects nested contexts in loops and function literals.
    - forbidigo  # Forbids identifiers.
    - forcetypeassert  # To ensure that type assertions are always checked.
    # - funlen  # Limit function length. Re-enable it later
    - gci  # Checks if code and import statements are formatted, it makes import statements always deterministic.
    - gocheckcompilerdirectives  # Checks that go compiler directive comments (//go:) are valid.
    # - gochecknoglobals  # Re-enable it later.
    # - gochecksumtype  # Run exhaustiveness checks on Go "sum types". https://github.com/alecthomas/go-check-sumtype Currently unused.
    # - gocognit  # Gocognit calculates cognitive complexities of functions (and methods) in Go source code. Re-enable it later
    - goconst  # Finds repeated strings that could be replaced by a constant. [fast]
    - gocritic  # Highly extensible Go source code linter providing checks currently missing from other linters.
    # - gocyclo  # Computes and checks the cyclomatic complexity of functions. Re-enable it later.
    - gofmt
    - gofumpt  # Ensures that code style is consistent
    - goimports  # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - gomodguard  # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname  # Checks that printf-like functions are named with f at the end
    - gosec  # Inspects source code for security problems
    - gosimple
    - gosimple  # Linter for Go source code that specializes in simplifying a code
    - govet  # vet code for bugs
    - grouper  # Analyze expression groups.
    - iface  # Detect the incorrect use of interfaces, helping developers avoid interface pollution. [auto-fix]
    - importas  # Enforces consistent import aliases. [auto-fix]
    - ineffassign  # Detects when assignments to existing variables are not used
    - intrange  # Intrange is a linter to find places where for loops could make use of an integer range. [auto-fix]
    - lll  # Limit line length
    - makezero  # Finds slice declarations with non-zero initial length
    # - maintidx  # Maintidx measures the maintainability index of each function. Re-enable it later.
    - nakedret  # Finds naked returns in functions greater than a specified function length
    - nestif
    - noctx  # noctx finds sending http request without context.Context
    - nolintlint  # Reports ill-formed or insufficient nolint directives
    - nolintlint  # To ensure that nolint directives are not misused.
    - nosprintfhostport  # Checks for misuse of Sprintf to construct a host with port in a URL.
    - mirror  # Reports wrong mirror patterns of bytes/strings usage.
    - nilerr  # Finds the code that returns nil even if it checks that the error is not nil.
    - paralleltest
    - perfsprint  # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - prealloc  # [premature optimization, but can be used in some cases] Finds slice declarations that could potentially be preallocated
    - predeclared  # find code that shadows one of Go's predeclared identifiers
    - promlinter  # Check Prometheus metrics naming via promlint
    - rowserrcheck  # checks whether Err of rows is checked successfully
    - sqlclosecheck  # Checks that sql.Rows and sql.Stmt are closed.
    - staticcheck  # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    # - stylecheck  # Stylecheck is a replacement for golint. Re-enable it later.
    # - tagalign  # TagAlign is used to align and sort tags in Go struct. It can make the struct more readable and easier to maintain. Re-enable it later.
    - testifylint  # Checks usage of github.com/stretchr/testify. [auto-fix]
    - thelper   # Thelper detects tests helpers which is not start with t.Helper() method.
    - tparallel  # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck  # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert  # Remove unnecessary type conversions
    - unparam  # Reports unused function parameters
    - unused  # Checks Go code for unused constants, variables, functions and types
    - unused  # Checks Go code for unused constants, variables, functions and types.
    - usestdlibvars  # A linter that detect the possibility to use variables/constants from the Go standard library.
    - usetesting  # Checks that the testing package is used correctly
    - wastedassign  # wastedassign finds wasted assignment statements.
    - whitespace  # Tool for detection of leading and trailing whitespace
    - zerologlint

  # Instead of disable-all, we are explicitly disabling the linters we don't want
  #  disable-all: true
  disable:
    # Following linters are intentionally disable for being too noisy
    - depguard
    - godot
    - godox
    - gosmopolitan
    - interfacebloat
    # This breaks encapsulation, disabling it.
    - ireturn  # Accept Interfaces, Return Concrete Types
    - mnd
    - nlreturn
    # Too noisy
    # Re-enable it
    # - revive  # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - tagliatelle
    - testpackage
    - varnamelen
    - wrapcheck
    - wsl

issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50

  exclude:
    # Ref: https://github.com/golangci/golangci-lint/issues/166
    - 'declaration of "err" shadows declaration at'

  exclude-rules:
    - source: "^//\\s*go:generate\\s"
      linters: [lll]
    - source: "^// "
      linters: [lll]
    - source: "(noinspection|TODO)"
      linters: [godot]
    - source: "//noinspection"
      linters: [gocritic]
    - source: "^\\s+if _, ok := err\\.\\([^.]+\\.InternalError\\); ok {"
      linters: [errorlint]
    - path: "_test\\.go"
      linters:
        - bodyclose
        - funlen
        - goconst
        - gosec
        - noctx
        - unparam
        - wrapcheck
        - gochecknoglobals
        - errcheck
        - forcetypeassert
